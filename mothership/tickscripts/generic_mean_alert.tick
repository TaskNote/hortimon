// which measurement we should consume from, like cpu or garden
var measurement string
// Optional where filter
var where_filter = lambda: TRUE
// Optional list of group by dimensions
var groups = [*]

// time window
var window = 1m
var period = 1m

// Which field to process eg 'temperature' or 'humidity'
var field string

// Warning criteria, has access to 'mean' field
var warn = lambda: FALSE
// Warning reset criteria, has access to 'mean' field
var warnReset = lambda: FALSE

// Critical criteria, has access to 'mean' field
var crit = lambda: FALSE
// Critical reset criteria, has access to 'mean' field
var critReset = lambda: FALSE

stream
    |from()
        .measurement(measurement)
        .where(where_filter)
        .groupBy(groups)
    |window()
        .period(period)
        .every(window)
    |mean(field)
    |alert()
        .id('{{ .Name }}/{{ index .Tags "environment" }}/' + field)
        .message('{{ .Level}}: {{ index .Tags "environment" }} ' + field + ' = {{ index .Fields "mean" | printf "%0.2f" }}')
        .warn(warn)
        .warnReset(warnReset)
        .crit(crit)
        .critReset(critReset)
        .stateChangesOnly()
        .log('/var/log/alerts/alerts.log')
        .post('http://sms-notifier:5000/send-sms-to-env')

